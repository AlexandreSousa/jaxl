#summary Behind the scenes - How and What XML's are exchanged

= Pre-requisite =
Though it's not mandatory but will be helpful if you have given a casual reading to the following RFC's
  * [http://xmpp.org/rfcs/rfc3920.html Extensible Messaging and Presence Protocol(XMPP):Core]
  * [http://xmpp.org/rfcs/rfc3921.html Extensible Messaging and Presence Protocol(XMPP):Instant Messaging and Presence]

= Case: Google Talk Server =
Following are the XML Streams and Stanza's exchanged when you try to connect to gtalk server.

  * JAXL Sends >>
{{{
<?xml version="1.0"?>
<stream:stream xmlns:stream="http://etherx.jabber.org/streams" version="1.0" xmlns="jabber:client" to="gmail.com" xml:lang="en" xmlns:xml="http://www.w3.org/XML/1998/namespace">
}}}

  * Gtalk Acknowledges With >>
{{{
<?xml version="1.0" encoding="UTF-8"?>
<stream:stream from="gmail.com" id="981E0522D7363BDF" version="1.0" xmlns:stream="http://etherx.jabber.org/streams" xmlns="jabber:client">
<stream:features>
  <starttls xmlns="urn:ietf:params:xml:ns:xmpp-tls">
    <required/>
  </starttls>
  <mechanisms xmlns="urn:ietf:params:xml:ns:xmpp-sasl">
    <mechanism>X-GOOGLE-TOKEN</mechanism>
  </mechanisms>
</stream:features>
}}}
Gtalk server tells that TLS Encryption is required

  * JAXL Sends >>
{{{
<starttls xmlns="urn:ietf:params:xml:ns:xmpp-tls"/>
}}}
and hence starting TLS Encryption

  * Gtalk Acknowledges With >>
{{{
<proceed xmlns="urn:ietf:params:xml:ns:xmpp-tls"/>
}}}
which essentially means proceed with the implementation

  * JAXL Sends >>
{{{
<?xml version="1.0"?>
<stream:stream xmlns:stream="http://etherx.jabber.org/streams" version="1.0" xmlns="jabber:client" to="gmail.com" xml:lang="en" xmlns:xml="http://www.w3.org/XML/1998/namespace">
}}}
JAXL try to initiate connection yet again after TLS encryption

  * Gtalk Acknowledges With >>
{{{
<?xml version="1.0" encoding="UTF-8"?>
<stream:stream from="gmail.com" id="C01610C43D6A37A2" version="1.0" xmlns:stream="http://etherx.jabber.org/streams" xmlns="jabber:client">
<stream:features>
  <mechanisms xmlns="urn:ietf:params:xml:ns:xmpp-sasl">
    <mechanism>PLAIN</mechanism>
    <mechanism>X-GOOGLE-TOKEN</mechanism>
  </mechanisms>
</stream:features>
}}}
Gtalk server acknowledges by telling the valid SASL authentication mechanism which Gtalk server supports

  * JAXL Sends >>
{{{
<auth xmlns="urn:ietf:params:xml:ns:xmpp-sasl" mechanism="PLAIN">AGFjY192nbRbm3J1cGvxYWRzAG15QVRNcGlukT9zcpMxAjI=</auth>
}}}
The sent auth stream contains information about both Username and Password

  * Gtalk Acknowledge With >>
{{{
<success xmlns="urn:ietf:params:xml:ns:xmpp-sasl"/>
}}}
i.e. the authentication was successful

  * JAXL Sends >>
{{{
<?xml version="1.0"?>
<stream:stream xmlns:stream="http://etherx.jabber.org/streams" version="1.0" xmlns="jabber:client" to="gmail.com" xml:lang="en" xmlns:xml="http://www.w3.org/XML/1998/namespace">
}}}
After successful auth, JAXL sends the initiating stream once again

  * Gtalk Acknowledge With >>
{{{
<?xml version="1.0" encoding="UTF-8"?>
<stream:stream from="gmail.com" id="1DA3DFD778DA0116" version="1.0" xmlns:stream="http://etherx.jabber.org/streams" xmlns="jabber:client">
<stream:features>
  <bind xmlns="urn:ietf:params:xml:ns:xmpp-bind"/>
  <session xmlns="urn:ietf:params:xml:ns:xmpp-session"/>
</stream:features>
}}}
asking to bind the stream

  * JAXL Sends >>
{{{
<iq type="set" id="1">
  <bind xmlns="urn:ietf:params:xml:ns:xmpp-bind">
    <resource>jaxl</resource>
  </bind>
</iq>
}}}

  * Gtalk Acknowledge With >>
{{{
<iq id="1" type="result">
  <bind xmlns="urn:ietf:params:xml:ns:xmpp-bind">  
    <jid>myproductionuser@gmail.com/jaxl25C3CD9A</jid>
  </bind>
</iq>
}}}

  * JAXL Sends >>
{{{
<iq type="get" to="gmail.com">
  <query xmlns="http://jabber.org/protocol/disco#info"/>
</iq>
}}}
JAXL queries for supported features by Gtalk server

  * Gtalk Acknowledge With >>
{{{
<iq to="myproductionuser@gmail.com/jaxl25C3CD9A" from="gmail.com" type="result">
  <query xmlns="http://jabber.org/protocol/disco#info">
    <identity category="server" type="im" name="Google Talk"/>
    <feature var="http://jabber.org/protocol/disco#info"/>
    <feature var="google:jingleinfo"/>
    <feature var="google:roster"/>
    <feature var="google:nosave"/>
    <feature var="google:setting"/>
    <feature var="google:shared-status"/>
    <feature var="http://jabber.org/protocol/archive#otr"/>
    <feature var="google:mail:notify"/>
    <feature var="http://jabber.org/protocol/archive#save"/>
  </query>
</iq>
}}}
Telling back to JAXL about various protocols and features it supports

  * JAXL Sends >>
{{{
<iq type="get" id="2">
  <query xmlns="jabber:iq:roster"/>
</iq>
}}}

  * Gtalk Acknowledge With >>
{{{
<iq to="myproductionuser@gmail.com/jaxl25C3CD9A" id="2" type="result">
  <query xmlns="jabber:iq:roster">
    <item jid="friend_1@gtalkbots.com" subscription="both"><group>Buddies</group></item>
    <item jid="friend_2@gmail.com" subscription="both"/>
    <item jid="friend_3@gmail.com" subscription="both"><group>Buddies</group></item>
    <item jid="friend_4@gmail.com" subscription="both" name="Abhinav Singh"/>
    <item jid="friend_5@gmail.com" subscription="both"><group>Buddies</group></item>
    <item jid="friend_6@yahoo.co.in" subscription="none" ask="subscribe"/>
  </query>
</iq>
}}}

  * JAXL Sends >>
{{{
<presence from="myproductionuser@gmail.com/jaxl25C3CD9A" to="friend_6@yahoo.co.in" type="subscribed"/>
<presence>
  <show>chat</show>
  <status>Online using JAXL - Jabber XMPP Library</status>
</presence>
}}}
First JAXL sends a subscription accept to _"friend_6@yahoo.co.in"_ who is still requesting subscription. Then it set it's own status message to _"Online using JAXL - Jabber XMPP Library"_

  * Gtalk Acknowledge With >>
{{{
<presence from="friend_1@gtalkbots.com/gtalkbots.BCFBAC47" to="myproductionuser@gmail.com/jaxl25C3CD9A">
  <status>I am online using Gtalkbot's Client Library (JAXL)</status>
  <x xmlns="vcard-temp:x:update">
    <photo>7d29d807158fd64820b109b4b42b2a23ca5a9d5a</photo>
  </x>
</presence> 
}}}

And in this fashion JAXL Client and Gtalk Server keeps exchanging XML Streams when ever there is a new message or an update in friend's status message.

For more detail and in-depth knowledge kindly refer to the RFC documents linked at the top.