#labels Featured
This wiki page will take you through on how to use JAXL Client library

= Introduction =

JAXL Client Library is highly structured. There is a base XMPP class library _(xmpp.class.php)_ and a JAXL class library _(jaxl.class.php)_ which is derived from the base XMPP class library.

Base XMPP class library implements the XMPP protocol and also provides you with two extendable methods named _eventMessage()_ and _eventPresence()_. These methods are internally called when a message or presence XML Stanza is received from the Jabber server.

You should have a look at included _jaxl.class.php_ and modify extended eventMessage() and eventPresence() methods as required.

This library includes the following files:

== Example Key Db Class (key.db.php) ==
Specify all your username, password in this file. You can specify more than one username and choose which one to use by changing $env variable.
{{{
  $env = "prod";
  
  $key = array("prod"=>array("user"=>"myproductionuser",
                             "pass"=>"password",
                             "host"=>"talk.google.com",
                             "port"=>5222,
                             "domain"=>"gmail.com"
                            ),
              "devel"=>array("user"=>"mydevelopmentuser",
                             "pass"=>"password",
                             "host"=>"localhost",
                             "port"=>5222,
                             "domain"=>"localhost"
                            )
              );
}}}
While working in a test environment you must be using $env = "devel"
and while working in production environment you must switch to $env = "prod" 

== Base XMPP Class (xmpp.class.php) ==
You should not worry about this class. 
Until and unless you are aware of what are you trying to achieve you should not touch this class file.

== Logger Class (logger.class.php) ==
This is a basic logger class.
It help you log each and every XML send to and received from jabber server. 

== Example JAXL Class (jaxl.class.php) ==
You will be customizing eventMessage() and eventPresence() methods here. 
{{{
  /* Include Base XMPP Class */
  include_once("xmpp.class.php");
  
  class JAXL extends XMPP {
    
    function eventMessage($fromJid, $content, $offline = FALSE) {
      // Take necessary action when a message is received 
      $this->sendMessage($fromJid,"Hi, Thanks for your message");
    }
    
    function eventPresence($fromJid, $status, $photo) {
      // Take necessary action when a presence is received
    }
    
  }
}}}
In above example I send a message back saying _"Hi, Thanks for your message"_, when I receive an IM from my friend.

== Final index.php ==
{{{
  /* Include Key file */
  include_once("key.db.php");
  
  /* Create an instance of XMPP Class */
  $jaxl = new JAXL($key[$env]['host'],
                   $key[$env]['port'],
                   $key[$env]['user'],
                   $key[$env]['pass'],
                   $key[$env]['domain']
                  );
  
  try {
    /* Initiate the connection */
    $jaxl->connect();
    
    /* Communicate with Jabber Server */
    while($jaxl->isConnected) {
      $jaxl->getXML();
    }
  }
  catch(Exception $e) {
    die($e->getMessage());
  }
}}}